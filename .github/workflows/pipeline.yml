name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]
    types: [opened, synchronize]

jobs:
  frontend-predeploy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '23'
      - name: Install deps
        run: npm ci
        working-directory: ./frontend
      - name: Lint
        run: npm run lint
        working-directory: ./frontend
      - name: Test
        run: npm test
        working-directory: ./frontend

  backend-predeploy:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: localUser
          POSTGRES_PASSWORD: localPassword
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout
          5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '23'
      - name: Install deps
        run: npm ci
        working-directory: ./backend

      - name: Lint
        run: npm run lint
        working-directory: ./backend

      - name: Test
        run: npm test
        working-directory: ./backend
        env:
          POSTGRES_USER: localUser
          POSTGRES_PASSWORD: localPassword
          POSTGRES_DB: test
          REDIS_URL: redis://localhost:6379
          SECRET: ${{ secrets.SECRET }}

  e2e:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: localUser
          POSTGRES_PASSWORD: localPassword
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout
          5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '23'
      - name: Install deps (root)
        run: npm ci
        working-directory: ./
      - name: Install deps (backend)
        run: npm ci
        working-directory: ./backend
      - name: Start backend
        run: npm run start:test
        env:
          POSTGRES_USER: localUser
          POSTGRES_PASS: localPassword
          POSTGRES_DB: test
          REDIS_URL: redis://localhost:6379
          SECRET: ${{ secrets.SECRET }}
        working-directory: ./backend
      - name: Install deps (frontend)
        run: npm ci
        working-directory: ./frontend
      - name: start frontend
        run: npm run dev
        working-directory: ./frontend
      - name: Test
        run: npm test
        working-directory: ./

  deploy:
    needs: [frontend-predeploy, backend-predeploy]
    runs-on: ubuntu-20.04
    if: |
      github.event_name == 'push' &&
      !contains(join(toJson(github.event.commits.*.message), ' '), '#skip')
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '23'
      - name: Install deps
        run: npm ci
        working-directory: ./backend
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: npm run build && flyctl deploy --remote-only
        working-directory: ./backend

  tag-release:
    needs: [deploy]
    runs-on: ubuntu-20.04
    if: |
      github.event_name == 'push' &&
      !contains(join(toJson(github.event.commits.*.message), ' '), '#skip')
    steps:
      - uses: actions/checkout@v4
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BRANCH: patch
